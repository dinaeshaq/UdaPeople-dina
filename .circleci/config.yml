version: 2.1
orbs:
  slack: circleci/slack@4.3.1
# aws-cli: circleci/aws-cli@1.3.0

parameters:
  memstash-token:
    type: string
    default: b4faec55-30f0-4bf0-bbb4-a722fe314562
  aws-region:
    type: string
    default: us-west-2

commands:

  # create-env-file:
  #   description: Create .env file
  #   steps:
  #     - run:
  #         name: Create .env file
  #         when: always
  #         command: |
  #           touch backend/.env
  #           echo ENVIRONMENT=production > "backend/.env"
  #           echo NODE_ENV=production >> "backend/.env"
  #           echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
  #           echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
  #           echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
  #           echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
  #           echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
  #           echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
  #           echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
  #           echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
  #           echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
  #           cat backend/.env

  # create-bash-profile-file:
  #   description: Create .bash_profile file
  #   steps:
  #     - run:
  #         name: Create .bash_profile file
  #         when: always
  #         command: |
  #           touch /home/.bash
  #           echo "export ENVIRONMENT=production" > "/home/.bash"
  #           echo "export TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> "/home/.bash"
  #           echo "export TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> "/home/.bash"
  #           echo "export TYPEORM_HOST=$TYPEORM_HOST" >> "/home/.bash"
  #           echo "export TYPEORM_PORT=$TYPEORM_PORT" >> "/home/.bash"
  #           echo "export TYPEORM_USERNAME=$TYPEORM_USERNAME" >> "/home/.bash"
  #           echo "export TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> "/home/.bash"
  #           echo "export TYPEORM_DATABASE=$TYPEORM_DATABASE" >> "/home/.bash"

  # host-authenticity-bypass:
  #   description: Avoid unknown hosts
  #   steps:
  #     - run:
  #         name: Host authenticity bypass
  #         when: always
  #         command: |
  #           echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

  slack-failed:
    description: Send notification to Slack if failed
    steps:
      - slack/notify:
          channel: devops
          event: fail
          # message: Fail  message to notify the channel about the latest build #
          template: basic_fail_1

  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      backend-infra:
        type: string
        default: backend-${CIRCLE_WORKFLOW_ID}
      frontend-infra:
        type: string
        default: frontend-${CIRCLE_WORKFLOW_ID}
      s3-bucket:
        type: string
        default: udapeople-frontend-${CIRCLE_WORKFLOW_ID}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://<< parameters.s3-bucket >> --recursive
            aws cloudformation delete-stack --stack-name << parameters.backend-infra >>
            aws cloudformation delete-stack --stack-name << parameters.frontend-infra >>
            exit 0





  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - restore_cache:
          key: backend-build
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=`curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}`
            if (( $SUCCESS==1 ))
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack-failed

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build backend
          command: |

            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack-failed


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build
      - run:
          name: Run front end tests
          command: |

            ls frontend/
            cd frontend
            npm install
            npm install oauth-sign
            npm run test
      - slack-failed      

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build
      - run:
          name: Run back end tests
          command: |
            cd backend
            npm run test
      - slack-failed

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build
      - run:
          name: Run front end audit
          command: |
            cd frontend
            #npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
      - slack-failed

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build
      - run:
          name: Run back end audit
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            #npm audit --audit-level=critical
      - slack-failed

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --tags project=udacity --stack-name backend-${CIRCLE_WORKFLOW_ID} --parameter-overrides ID=backend-${CIRCLE_WORKFLOW_ID} 
              #exit 1
      - run:
          name: store URL

        # Query only the Ec2 instance which is currently createted using "backend-backend-${CIRCLE_WORKFLOW_ID}"  as a query key , other wise it will get all the Ec2 instance ip and store in inventory.txt wich
        # will overwrite all the Ec2 infra if ansible playbook got all the Ec2 ips

          command: |
            BACKEND_IP=$(aws ec2 describe-instances --region us-west-2 --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Name,Values=backend-backend-${CIRCLE_WORKFLOW_ID}" --output text)
            echo "BACKEND_IP=$BACKEND_IP"
            echo ${CIRCLE_WORKFLOW_ID}
            curl -H "Content-Type: text/plain" -H "token: << pipeline.parameters.memstash-token >>" --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --tags project=udacity --stack-name frontend-${CIRCLE_WORKFLOW_ID} --parameter-overrides ID=frontend-${CIRCLE_WORKFLOW_ID}
              #exit 1
      - run:
          command: |
            yum -y install tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          # clears the inventory file to have only the existing instances
          # Query only the Ec2 instance which is currently createted using "backend-backend-${CIRCLE_WORKFLOW_ID}"  as a query key , other wise it will get all the Ec2 instance ip and store in inventory.txt wich
          # will overwrite all the Ec2 infra if ansible playbook got all the Ec2 ips
          command: |
            rm .circleci/ansible/inventory.txt 
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-backend-${CIRCLE_WORKFLOW_ID}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            ls ~/
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment
      #    workflow_id: ${CIRCLE_WORKFLOW_ID}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["77:50:06:fa:0d:9f:b2:0e:66:6a:46:6a:5d:68:36:b1"]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cat /tmp/.circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment
        #  workflow_id: ${CIRCLE_WORKFLOW_ID}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            ENVIROMENT=$ENVIROMENT
            TYPEORM_CONNECTION=$TYPEORM_CONNECTION
            TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR
            TYPEORM_ENTITIES=$TYPEORM_ENTITIES
            TYPEORM_HOST=$TYPEORM_HOST
            TYPEORM_PORT=$TYPEORM_PORT
            TYPEORM_USERNAME=$TYPEORM_USERNAME
            TYPEORM_PASSWORD=$TYPEORM_PASSWORD
            TYPEORM_DATABASE=$TYPEORM_DATABASE
            npm config rm proxy
            npm config rm https-proxy
            npm config delete http-proxy
            npm config delete https-proxy
            set HTTP_PROXY=null
            set HTTPS_PROXY=null
            npm install
            touch migrations_log.txt
            npm run migrations >> migrations_log.txt
            cat migrations_log.txt
            echo "log complete"
      - run:
          name: Send migration results to memstash
          command: |
            echo "CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID}"
            if grep "has been executed successfully" backend/migrations_log.txt;
            then curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}; \
            echo "1"
            fi
      - destroy-environment
        #  workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations
        #  workflow_id: ${CIRCLE_WORKFLOW_ID}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Get backend url
          command: |

            export BACKEND_IP=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID})
            API_URL=http://${BACKEND_IP}:3030
            echo = "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            cd frontend
            npm install
            npm run build

      - run:
          name: Copy to S3
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID} --recursive

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["77:50:06:fa:0d:9f:b2:0e:66:6a:46:6a:5d:68:36:b1"]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
                curl \
                nodejs \
                npm \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible
      - run:
          name: Deploy backend
          no_output_timeout: 60m
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            cat /tmp/.circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/prometheus.yml
      - destroy-environment
      - revert-migrations
      - slack-failed

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            yum -y install curl
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Get backend url
          no_output_timeout: 30m
          command: |
            BACKEND_IP=$(grep -v "[web]" /tmp/.circleci/ansible/inventory.txt)
            echo "${BACKEND_IP}"
            curl -Is http://${BACKEND_IP}:3030/api/status | head -n 1
      - run:
          name: Frontend smoke test.
          #semuilate Smoke Test Failure by changing the W to w at Welcom .
          command: |
            URL="http://udapeople-frontend-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            echo $URL
            if curl -s ${URL} | grep "Welcome"
              then
                exit
              else
                exit
              fi
      - slack-failed
      - destroy-environment
      - revert-migrations
      
# Create First the CloudFront just one time then we will not use- and disable it.
  
  cloudfront-create:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: pip install awscli && apk add --update nodejs npm curl
      - run:
          name: cloudfront-create
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udacity \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"
      - slack-failed
      - revert-migrations
      - destroy-environment

# Cloundfront update its the step which we will use every time we need to promote The Green To become Blue bases on the 
# previous created CloudFormation Template.
  
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip jq git
      - run:
          name: Update cloudfront distribution
          # save OldWorkflowID Value which got during Quiry against Cloundfront previously created Exporter , at memstash To use it later 
          # Before Update the Cloudfront update Value , so it will use also in cleaning process 
          # where we will delete the stack that belong to that value .  
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo OldWorkflowID =$OldWorkflowID
            curl -H "Content-Type: text/plain" -H "token:<< pipeline.parameters.memstash-token >>" --request PUT --data "$OldWorkflowID" https://api.memstash.io/values/OldWorkflowID
            export OldWorkflowIDmemstash=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/OldWorkflowID)
            echo OldWorkflowIDmemstash=$OldWorkflowIDmemstash

            aws cloudformation update-stack \
              --stack-name udapeople-cloudfront \
              --use-previous-template \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID}
      - slack-failed
      - revert-migrations
      - destroy-environment



  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          # retrive the stored OldWorkflowID of the Old satck that we stored breviously at "memstash" so we can delete its belongs stack after   
          # The Green stack successfully passed the Smoke-Teset and become up and works , so we should delet the old stack to save our cost ,
          # and get the christmas bonus :).
           
        
          command: |
            export OldWorkflowID=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/OldWorkflowID)
            echo OldWorkflowID=$OldWorkflowID

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo $OldWorkflowID
            echo $STACKS
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rb s3://udapeople-frontend-${OldWorkflowID} --force

              aws cloudformation delete-stack --stack-name backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name frontend-${OldWorkflowID}

            fi
      - slack-failed


workflows:
  default:
    jobs:
      - build-backend
      - build-frontend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
    # - cloudfront-create:
    #     requires: [smoke-test]    
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
