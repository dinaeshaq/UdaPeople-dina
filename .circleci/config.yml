version: 2.1

orbs:
  slack: circleci/slack@4.3.1
  aws-cli: circleci/aws-cli@1.3.0


parameters:
#  memstash-token:
#    type: string
#    default: a0ad56c5-0970-4814-bfb1-7e78582de0a5
  aws-region:
    type: string
    default: us-west-2


commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      backend-stack:
        type: string
        default: backend-stack-${CIRCLE_WORKFLOW_ID}
      frontend-stack:
        type: string
        default: frontend-stack-${CIRCLE_WORKFLOW_ID}
      s3-bucket:
        type: string
        default: udapeople-${CIRCLE_WORKFLOW_ID}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://<< parameters.s3-bucket >> --recursive
            aws cloudformation delete-stack --stack-name << parameters.backend-stack>>
            aws cloudformation delete-stack --stack-name << parameters.frontend-stack >>
            exit 0
  
  extract-commit-message:
    description: Extract commit message
    steps:
      - run:
          name: Extract commit message
          when: always
          command: |
            echo "export COMMIT_MESSAGE=\"$(git log --format=%B -n 1 $CIRCLE_SHA1)\"" >> $BASH_ENV
            source $BASH_ENV
  
  
  create-env-file:
    description: Create .env file
    steps:
      - run:
          name: Create .env file
          when: always
          command: |
            touch backend/.env
            echo ENVIRONMENT=production > "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
  
  create-bash-profile-file:
    description: Create .bash_profile file
    steps:
      - run:
          name: Create .bash_profile file
          when: always
          command: |
            touch /home/.bash
            echo "export ENVIRONMENT=production" > "/home/.bash"
            echo "export TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> "/home/.bash"
            echo "export TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> "/home/.bash"
            echo "export TYPEORM_HOST=$TYPEORM_HOST" >> "/home/.bash"
            echo "export TYPEORM_PORT=$TYPEORM_PORT" >> "/home/.bash"
            echo "export TYPEORM_USERNAME=$TYPEORM_USERNAME" >> "/home/.bash"
            echo "export TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> "/home/.bash"
            echo "export TYPEORM_DATABASE=$TYPEORM_DATABASE" >> "/home/.bash"
  host-authenticity-bypass:
    description: Avoid unknown hosts
    steps:
      - run:
          name: Host authenticity bypass
          when: always
          command: |
            echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install 
            npm run build       
            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install 
            npm run build       
            #exit 1
      - save_cache:
          key: backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - backend/node_modules
            - backend/dist

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys:
            - "frontend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}"
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm i
            npm install oauth-sign
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here

      - checkout
      - restore_cache:
          keys:
            - "backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}"
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys:
            - "frontend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}"
      - run:
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys:
            - "backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}"
      - run:
          command: |
            cd backend
            npm audit fix --audit-level=critical --force 

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Prerequisites
          command: |
            yum -y install tar gzip jq git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople type=backend\
              --stack-name backend-stack-$CIRCLE_WORKFLOW_ID \
              --parameter-overrides ID=$CIRCLE_WORKFLOW_ID

      - run:
           name: Add back-end ip to ansible inventory
           command: |

             echo "[web]" > inventory
             aws ec2 describe-instances \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text >> .circleci/ansible/inventory.txt 
               cat .circleci/ansible/inventory.txt 
               pwd
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople type=frontend\
                --stack-name frontend-stack-$CIRCLE_WORKFLOW_ID \
                --parameter-overrides ID=$CIRCLE_WORKFLOW_ID
      
      - destroy-environment
      #- destroy-environment
        
 # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
    - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [77:50:06:fa:0d:9f:b2:0e:66:6a:46:6a:5d:68:36:b1]
      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add jq tar gzip git curl rsync
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
           
      - attach_workspace:
          at: ~/
      - host-authenticity-bypass
      - create-env-file
      - create-bash-profile-file
      - run: mkdir -p  .circleci/ansible/roles/configure-server/files/backend
      - run: cp -rv backend/*  .circleci/ansible/roles/configure-server/files/backend
      - run: ls .circleci/ansible/roles/configure-server/files/backend
          
      
      - run:
            name: Configure server
            command: |
                 cd ~/project/.circleci/ansible
                 ansible-playbook configure-server.yml --inventory-file=inventory.txt
      
      - destroy-environment
      
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          key: backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - create-env-file
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations:revert
            npm run migrations > /tmp/migration.log
            cat /tmp/migration.log
            MIGRATION=`cat /tmp/migration.log | grep -c "has been executed successfully"`
            echo "Migration status: ${MIGRATION}"

  
         
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: alpine:latest
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

cleanup:
  docker:
    # Docker image here
    - image: circleci/node:13.8.0
  steps:
    # Checkout code from git
    - run:
        name: Get old stack workflow id
        command: |
          # your code here
          export OldWorkflowID="the id here"
          export STACKS=[] #put the list of stacks here
    - run:
        name: Remove old stacks and files
        command: |
          if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
          then
            # your code here
          fi

workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      - deploy-infrastructure:
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      #- cleanup:
      #   requires: [cloudfront-update]
